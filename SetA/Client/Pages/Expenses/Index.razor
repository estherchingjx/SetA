@page  "/expenses/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3>Expenses</h3>

@if (Expenses == null)
{
    <div class="alert alert-info">Loading Expenses...</div>
}

else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Amount</th>
                <th>Payment</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in Expenses)
            {
                <tr>
                    <td>@expense.Id</td>
                    <td>@expense.Name</td>
                    <td>@expense.Amount</td>
                    <td>@expense.Payment</td>
                    <td>
                        <a href="/expenses/view/@expense.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/expenses/edit/@expense.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(expense.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Expense> Expenses;

    protected async override Task OnInitializedAsync()
    {
        Expenses = await _client.GetFromJsonAsync<List<Expense>>($"{Endpoints.ExpensesEndpoint}");
    }

    async Task Delete(int expenseId)
    {
        var expense = Expenses.First(q => q.Id == expenseId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {expense.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ExpensesEndpoint}/{expenseId}");
            await OnInitializedAsync();
        }
    }

}
